trigger:
  - master
  # paths:
  #   include:
  #     - infra/*
  #     - app/src/*
  
pool:
    vmImage: ubuntu-latest
  
variables:
  - group: aws_vulnerable_app
  
stages:
    - stage: iac_validation
      condition: always()
      displayName: IaC Validate
      jobs:
        - job: iac_validation
          displayName:  IaC Validation
          steps:
          - bash: env
            displayName: Display Environment Variables
          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: '$(backendServiceAWS)'
              backendAWSBucketName: '$(projectName)'
              backendAWSKey: '$(backendAWSKey)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
          - task: TerraformTaskV4@4
            displayName: Terraform Validate
            inputs:
              provider: 'aws'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
    - stage: iac_scan
      condition: always()
      displayName: Code Scan
      dependsOn: iac_validation
      jobs:
        - job: security_gate
          displayName:  Checkov Scanning
          steps:
          - task: UsePythonVersion@0
            displayName: Instalacion Python
            inputs:
              versionSpec: '3.8'
          - script: pip install checkov
            displayName: Instalacion Checkov
          - script: |
              checkov --prisma-api-url $(PRISMA_CONSOLE) --bc-api-key $(PRISMA_TOKEN) -d . --repo-id $(System.TeamProject)/$(Build.Repository.Name) --branch $(Build.SourceBranchName) --use-enforcement-rules --compact --quiet
            displayName: Escaneo IaC
    - stage: iac_deploy
      displayName: IaC Deploy
      dependsOn: 
        - iac_validation
        - iac_scan
      jobs:
        - job: iac_deploy
          displayName:  Terraform Apply
          steps:
          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: '$(backendServiceAWS)'
              backendAWSBucketName: '$(projectName)'
              backendAWSKey: '$(backendAWSKey)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
          - task: TerraformTaskV4@4
            displayName: Terraform Apply
            inputs:
              provider: 'aws'
              command: 'apply'
              environmentServiceNameAWS: '$(backendServiceAWS)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(infraPath)'
              commandOptions: '-refresh=false'
          - bash: |
              echo "##vso[task.setvariable variable=clusterName;isOutput=true]$(terraform -chdir=$(System.DefaultWorkingDirectory)/$(infraPath) output -raw cluster_name)"
            name: terraformVariables
    - stage: app_deployment
      displayName: Application Deploy
      dependsOn: 
        - iac_deploy
      condition: always()
      variables:
            - name: clusterName
              value: $[stageDependencies.iac_deploy.iac_deploy.outputs['terraformVariables.clusterName']]
      jobs:
        - job: app_deployment
          displayName: Application Deploy
          steps:
          - bash: aws eks update-kubeconfig --name $(clusterName)
            displayName: "Update Kube Config"
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in **/*
            inputs:
              rootDirectory: $(System.DefaultWorkingDirectory)
              targetFiles: '$(k8sPath)/app.yaml'
              keepToken: true
              tokenPrefix: __
              tokenSuffix: __
          - bash: kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/app.yaml
            displayName: "Deploying Spring Application"
          - bash: kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/priv-pod.yaml
            displayName: "Deploying Nginx Application"
          - bash: kubectl get svc -A | grep elb | awk '{print $5}'
            displayName: URL to Attack
    - stage: defender_deployment
      displayName: Apply Defender (Prisma)
      dependsOn: 
        - iac_deploy
      condition: always()
      variables:
            - name: clusterName
              value: $[stageDependencies.iac_deploy.iac_deploy.outputs['terraformVariables.clusterName']]
      jobs:
        - job: defender_deployment
          displayName: Prisma Cloud Defender Deployment
          steps:
          - bash: aws eks update-kubeconfig --name $(clusterName)
            displayName: "Update Kube Config"
          - bash: |
              if [[ $(kubectl get ns | grep prismacloud | awk '{print $1}') != 'prismacloud' ]]
              then
                kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/daemonset.yaml && kubectl apply -f $(System.DefaultWorkingDirectory)/$(k8sPath)/webhook.yaml
              else
                echo "Prisma Cloud Namespace already exists, not deploying again!"
              fi
            displayName: "Deploying Prisma Cloud Defender"